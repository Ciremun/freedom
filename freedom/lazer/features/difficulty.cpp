#include "lazer/features/difficulty.h"

#define INT64_BYTEA(i) \
    (uint8_t)(((i) & 0x00000000000000FFULL)), \
    (uint8_t)(((i) & 0x000000000000FF00ULL) >> 8), \
    (uint8_t)(((i) & 0x0000000000FF0000ULL) >> 16), \
    (uint8_t)(((i) & 0x00000000FF000000ULL) >> 24), \
    (uint8_t)(((i) & 0x000000FF00000000ULL) >> 32), \
    (uint8_t)(((i) & 0x0000FF0000000000ULL) >> 40), \
    (uint8_t)(((i) & 0x00FF000000000000ULL) >> 48), \
    (uint8_t)(((i) & 0xFF00000000000000ULL) >> 56)

DifficultySetting ar_setting = {
    true,       // enabled
    10.0f,      // value
    "AR",       // label
    "AR: %.1f", // fmt
};

DifficultySetting cs_setting = {
    false,      // enabled
    4.0f,       // value
    "CS",       // label
    "CS: %.1f", // fmt
};

DifficultySetting od_setting = {
    false,      // enabled
    8.0f,       // value
    "OD",       // label
    "OD: %.1f", // fmt
};

DifficultySetting dr_setting = {
    false,      // enabled
    8.0f,       // value
    "DR",       // label
    "DR: %.1f", // fmt
};

bool init_difficulty(uintptr_t base)
{
    if (!base)
        return false;

    // TODO(Ciremun): Append instructions, Fix alignment
    BYTE methodBody[] = {
        // NOTE(Ciremun): Header
        0x1B, 0x30, 0x04, 0x00, 0x71, 0x03, 0x00, 0x00, 0x83, 0x0F, 0x00, 0x11, 
        // NOTE(Ciremun): Instructions
        0x03, 0x6F, 0x67, 0x4B, 0x00, 0x06, 0x0A, 0x06, 0x2D, 0x0B, 0x72, 0xC3, 0x94, 0x04, 0x70, 0x73, 0xDA, 0x4B, 0x00, 0x06, 0x7A, 0x02, 0x02, 0x28, 0xEE, 0xA9, 0x00, 0x06, 0x06, 0x6F, 0xF2, 0xA9, 0x00, 0x06, 0x0B, 0x02, 0x28, 0xEE, 0xA9, 0x00, 0x06, 0x6F, 0x12, 0xA9, 0x00, 0x06, 0x6F, 0x36, 0x05, 0x00, 0x0A, 0x16, 0x31, 0x64, 0x07, 0x6F, 0x41, 0xA9, 0x00, 0x06, 0x2D, 0x5C, 0x12, 0x04, 0x1F, 0x3F, 0x19, 0x28, 0xE9, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x72, 0x52, 0x36, 0x00, 0x70, 0x28, 0xEC, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x72, 0x5E, 0x95, 0x04, 0x70, 0x28, 0xEB, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x03, 0x6F, 0x66, 0x4B, 0x00, 0x06, 0x28, 0xEC, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x72, 0xC0, 0x95, 0x04, 0x70, 0x28, 0xEB, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x07, 0x28, 0xD7, 0x10, 0x00, 0x2B, 0x12, 0x04, 0x72, 0xC2, 0x36, 0x02, 0x70, 0x28, 0xEB, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x28, 0xED, 0x00, 0x00, 0x0A, 0x73, 0x74, 0x4C, 0x00, 0x06, 0x7A, 0x04, 0x28, 0xD8, 0x10, 0x00, 0x2B, 0x6F, 0x63, 0x39, 0x00, 0x0A, 0x13, 0x05, 0x2B, 0x14, 0x11, 0x05, 0x6F, 0x64, 0x39, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x26, 0x07, 0x00, 0x0A, 0x07, 0x6F, 0xBA, 0x51, 0x00, 0x06, 0x11, 0x05, 0x6F, 0x38, 0x02, 0x00, 0x0A, 0x2D, 0xE3, 0xDE, 0x0C, 0x11, 0x05, 0x2C, 0x07, 0x11, 0x05, 0x6F, 0xF8, 0x00, 0x00, 0x0A, 0xDC, 0x07, 0x05, 0x6F, 0x42, 0xA9, 0x00, 0x06, 0x0C, 0x04, 0x28, 0xD9, 0x10, 0x00, 0x2B, 0x6F, 0x65, 0x39, 0x00, 0x0A, 0x13, 0x06, 0x2B, 0x14, 0x11, 0x06, 0x6F, 0x66, 0x39, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x26, 0x07, 0x00, 0x0A, 0x08, 0x6F, 0xB5, 0x51, 0x00, 0x06, 0x11, 0x06, 0x6F, 0x38, 0x02, 0x00, 0x0A, 0x2D, 0xE3, 0xDE, 0x0C, 0x11, 0x06, 0x2C, 0x07, 0x11, 0x06, 0x6F, 0xF8, 0x00, 0x00, 0x0A, 0xDC, 0x04, 0x7E, 0xE8, 0x4F, 0x00, 0x04, 0x25, 0x2D, 0x17, 0x26, 0x7E, 0xE7, 0x4F, 0x00, 0x04, 0xFE, 0x06, 0xFA, 0xA9, 0x00, 0x06, 0x73, 0xBC, 0x02, 0x00, 0x0A, 0x25, 0x80, 0xE8, 0x4F, 0x00, 0x04, 0x28, 0x4D, 0x01, 0x00, 0x2B, 0x2C, 0x3F, 0x04, 0x28, 0x0F, 0x03, 0x00, 0x2B, 0x6F, 0xBB, 0x09, 0x00, 0x0A, 0x13, 0x07, 0x2B, 0x19, 0x11, 0x07, 0x6F, 0xBC, 0x09, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x26, 0x07, 0x00, 0x0A, 0x08, 0x6F, 0x0A, 0xA9, 0x00, 0x06, 0x6F, 0xBC, 0x51, 0x00, 0x06, 0x11, 0x07, 0x6F, 0x38, 0x02, 0x00, 0x0A, 0x2D, 0xDE, 0xDE, 0x0C, 0x11, 0x07, 0x2C, 0x07, 0x11, 0x07, 0x6F, 0xF8, 0x00, 0x00, 0x0A, 0xDC, 0x21, INT64_BYTEA((uintptr_t)&ar_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x20, 0x02, 0x28, 0xEE, 0xA9, 0x00, 0x06, 0x6F, 0x07, 0xA9, 0x00, 0x06, 0x6F, 0x21, 0xA7, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&ar_setting.value), 0xE0, 0x4E, 0x6F, 0x98, 0xA6, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&cs_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x20, 0x02, 0x28, 0xEE, 0xA9, 0x00, 0x06, 0x6F, 0x07, 0xA9, 0x00, 0x06, 0x6F, 0x21, 0xA7, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&cs_setting.value), 0xE0, 0x4E, 0x6F, 0x94, 0xA6, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&od_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x20, 0x02, 0x28, 0xEE, 0xA9, 0x00, 0x06, 0x6F, 0x07, 0xA9, 0x00, 0x06, 0x6F, 0x21, 0xA7, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&od_setting.value), 0xE0, 0x4E, 0x6F, 0x96, 0xA6, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&dr_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x20, 0x02, 0x28, 0xEE, 0xA9, 0x00, 0x06, 0x6F, 0x07, 0xA9, 0x00, 0x06, 0x6F, 0x21, 0xA7, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&dr_setting.value), 0xE0, 0x4E, 0x6F, 0x92, 0xA6, 0x00, 0x06, 0x06, 0x08, 0x6F, 0x8D, 0x4B, 0x00, 0x06, 0x0D, 0x09, 0x2C, 0x39, 0x04, 0x28, 0xDA, 0x10, 0x00, 0x2B, 0x6F, 0x67, 0x39, 0x00, 0x0A, 0x13, 0x08, 0x2B, 0x0D, 0x11, 0x08, 0x6F, 0x68, 0x39, 0x00, 0x0A, 0x09, 0x6F, 0xBB, 0x51, 0x00, 0x06, 0x11, 0x08, 0x6F, 0x38, 0x02, 0x00, 0x0A, 0x2D, 0xEA, 0xDE, 0x0C, 0x11, 0x08, 0x2C, 0x07, 0x11, 0x08, 0x6F, 0xF8, 0x00, 0x00, 0x0A, 0xDC, 0x09, 0x6F, 0x71, 0xA9, 0x00, 0x06, 0x08, 0x6F, 0x12, 0xA9, 0x00, 0x06, 0x6F, 0x5A, 0x11, 0x00, 0x0A, 0x13, 0x09, 0x2B, 0x20, 0x11, 0x09, 0x6F, 0x5B, 0x11, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x26, 0x07, 0x00, 0x0A, 0x08, 0x6F, 0x0C, 0xA9, 0x00, 0x06, 0x08, 0x6F, 0x0A, 0xA9, 0x00, 0x06, 0x05, 0x6F, 0xDF, 0x4F, 0x00, 0x06, 0x11, 0x09, 0x6F, 0x38, 0x02, 0x00, 0x0A, 0x2D, 0xD7, 0xDE, 0x0C, 0x11, 0x09, 0x2C, 0x07, 0x11, 0x09, 0x6F, 0xF8, 0x00, 0x00, 0x0A, 0xDC, 0x04, 0x28, 0xDB, 0x10, 0x00, 0x2B, 0x6F, 0x69, 0x39, 0x00, 0x0A, 0x13, 0x0A, 0x2B, 0x48, 0x11, 0x0A, 0x6F, 0x6A, 0x39, 0x00, 0x0A, 0x13, 0x0B, 0x08, 0x6F, 0x12, 0xA9, 0x00, 0x06, 0x6F, 0x5A, 0x11, 0x00, 0x0A, 0x13, 0x09, 0x2B, 0x19, 0x11, 0x09, 0x6F, 0x5B, 0x11, 0x00, 0x0A, 0x13, 0x0C, 0x0F, 0x03, 0x28, 0x26, 0x07, 0x00, 0x0A, 0x11, 0x0B, 0x11, 0x0C, 0x6F, 0xC0, 0x51, 0x00, 0x06, 0x11, 0x09, 0x6F, 0x38, 0x02, 0x00, 0x0A, 0x2D, 0xDE, 0xDE, 0x0C, 0x11, 0x09, 0x2C, 0x07, 0x11, 0x09, 0x6F, 0xF8, 0x00, 0x00, 0x0A, 0xDC, 0x11, 0x0A, 0x6F, 0x38, 0x02, 0x00, 0x0A, 0x2D, 0xAF, 0xDE, 0x0C, 0x11, 0x0A, 0x2C, 0x07, 0x11, 0x0A, 0x6F, 0xF8, 0x00, 0x00, 0x0A, 0xDC, 0x09, 0x2C, 0x06, 0x09, 0x6F, 0x72, 0xA9, 0x00, 0x06, 0x04, 0x28, 0xDC, 0x10, 0x00, 0x2B, 0x6F, 0x6B, 0x39, 0x00, 0x0A, 0x13, 0x0D, 0x2B, 0x14, 0x11, 0x0D, 0x6F, 0x6C, 0x39, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x26, 0x07, 0x00, 0x0A, 0x08, 0x6F, 0xB9, 0x51, 0x00, 0x06, 0x11, 0x0D, 0x6F, 0x38, 0x02, 0x00, 0x0A, 0x2D, 0xE3, 0xDE, 0x0C, 0x11, 0x0D, 0x2C, 0x07, 0x11, 0x0D, 0x6F, 0xF8, 0x00, 0x00, 0x0A, 0xDC, 0x08, 0x2A, 
        // NOTE(Ciremun): Padding, EHTable (EHTable must start on some boundary?)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x01, 0x64, 0x00, 0x00, 0x02, 0x00, 0xA7, 0x00, 0x21, 0xC8, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x00, 0xE9, 0x00, 0x21, 0x0A, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x4A, 0x01,
        0x26, 0x70, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x94, 0x01, 0x1A, 0xAE, 0x01, 0x0C,
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xCD, 0x01, 0x2D, 0xFA, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x2B, 0x02, 0x26, 0x51, 0x02, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x13, 0x02,
        0x55, 0x68, 0x02, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x8A, 0x02, 0x21, 0xAB, 0x02, 0x0C,
        0x00, 0x00, 0x00, 0x00
    };

    MEM_ADDRESS_REQUIREMENTS req = {};
    req.LowestStartingAddress = (PVOID)(base);
    req.HighestEndingAddress = NULL; // TODO(Ciremun): Set upper limit
    req.Alignment = 0;  // Aligns on the system allocation granularity

    MEM_EXTENDED_PARAMETER ext[1] = {};
    ext[0].Type = MemExtendedParameterAddressRequirements;
    ext[0].Pointer = &req;

    // TODO(Ciremun): VirtualAlloc2 alternative
    uintptr_t methodBodyLoc = (uintptr_t)VirtualAlloc2(0, 0, sizeof(methodBody), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READ, ext, 1);
    if (methodBodyLoc == NULL)
    {
        FR_ERROR("VirtualAlloc2 failed: %d", GetLastError());
        return false;
    }

    FR_INFO("GetPlayableBeatmap new method body: %" PRIXPTR, methodBodyLoc);
    if (!internal_memory_patch((BYTE *)methodBodyLoc, methodBody, sizeof(methodBody)))
    {
        FR_ERROR("GetPlayableBeatmap method body patch failed");
        return false;
    }

    // TODO(Ciremun): C header
    // NOTE(Ciremun): GetPlayableBeatmap Token
    DWORD *oldRVA = (DWORD *)token_to_rva(base, 0x0600A9F1);
    if (!oldRVA)
    {
        FR_ERROR("GetPlayableBeatmap Token to RVA failed");
        return false;
    }
    DWORD newRVA = (DWORD)(methodBodyLoc - base);

    FR_INFO("GetPlayableBeatmap old RVA: 0x%08" PRIX32, *oldRVA);
    FR_INFO("GetPlayableBeatmap new RVA: 0x%08" PRIX32, newRVA);
    if (!internal_memory_patch(oldRVA, &newRVA, sizeof(DWORD)))
    {
        FR_ERROR("GetPlayableBeatmap RVA patch failed");
        return false;
    }

    return true;
}
