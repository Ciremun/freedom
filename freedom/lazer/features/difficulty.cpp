#include "lazer/features/difficulty.h"

#define INT64_BYTEA(i) \
    (uint8_t)(((i) & 0x00000000000000FFULL)), \
    (uint8_t)(((i) & 0x000000000000FF00ULL) >> 8), \
    (uint8_t)(((i) & 0x0000000000FF0000ULL) >> 16), \
    (uint8_t)(((i) & 0x00000000FF000000ULL) >> 24), \
    (uint8_t)(((i) & 0x000000FF00000000ULL) >> 32), \
    (uint8_t)(((i) & 0x0000FF0000000000ULL) >> 40), \
    (uint8_t)(((i) & 0x00FF000000000000ULL) >> 48), \
    (uint8_t)(((i) & 0xFF00000000000000ULL) >> 56)

DifficultySetting ar_setting = {
    true,       // enabled
    10.0f,      // value
    "AR",       // label
    "AR: %.1f", // fmt
};

DifficultySetting cs_setting = {
    false,      // enabled
    4.0f,       // value
    "CS",       // label
    "CS: %.1f", // fmt
};

DifficultySetting od_setting = {
    false,      // enabled
    8.0f,       // value
    "OD",       // label
    "OD: %.1f", // fmt
};

DifficultySetting dr_setting = {
    false,      // enabled
    8.0f,       // value
    "DR",       // label
    "DR: %.1f", // fmt
};

void init_difficulty(uintptr_t base)
{
    if (!base)
        return;
    BYTE il[] = { 0x03, 0x6F, 0x72, 0x46, 0x00, 0x06, 0x0A, 0x21, INT64_BYTEA((uintptr_t)&ar_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x20, 0x02, 0x28, 0x8D, 0xA2, 0x00, 0x06, 0x6F, 0xA6, 0xA1, 0x00, 0x06, 0x6F, 0xCA, 0x9F, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&ar_setting.value), 0xE0, 0x4E, 0x6F, 0x41, 0x9F, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&cs_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x20, 0x02, 0x28, 0x8D, 0xA2, 0x00, 0x06, 0x6F, 0xA6, 0xA1, 0x00, 0x06, 0x6F, 0xCA, 0x9F, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&cs_setting.value), 0xE0, 0x4E, 0x6F, 0x3D, 0x9F, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&od_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x20, 0x02, 0x28, 0x8D, 0xA2, 0x00, 0x06, 0x6F, 0xA6, 0xA1, 0x00, 0x06, 0x6F, 0xCA, 0x9F, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&od_setting.value), 0xE0, 0x4E, 0x6F, 0x3F, 0x9F, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&dr_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x20, 0x02, 0x28, 0x8D, 0xA2, 0x00, 0x06, 0x6F, 0xA6, 0xA1, 0x00, 0x06, 0x6F, 0xCA, 0x9F, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&dr_setting.value), 0xE0, 0x4E, 0x6F, 0x3B, 0x9F, 0x00, 0x06, 0x02, 0x02, 0x28, 0x8D, 0xA2, 0x00, 0x06, 0x06, 0x6F, 0x91, 0xA2, 0x00, 0x06, 0x0B, 0x04, 0x28, 0x44, 0x10, 0x00, 0x2B, 0x6F, 0xDC, 0x37, 0x00, 0x0A, 0x13, 0x05, 0x2B, 0x14, 0x11, 0x05, 0x6F, 0xDD, 0x37, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x01, 0x07, 0x00, 0x0A, 0x07, 0x6F, 0xA8, 0x4C, 0x00, 0x06, 0x11, 0x05, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xE3, 0xDE, 0x0C, 0x11, 0x05, 0x2C, 0x07, 0x11, 0x05, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x07, 0x05, 0x6F, 0xE1, 0xA1, 0x00, 0x06, 0x0C, 0x04, 0x28, 0x45, 0x10, 0x00, 0x2B, 0x6F, 0xDE, 0x37, 0x00, 0x0A, 0x13, 0x06, 0x2B, 0x14, 0x11, 0x06, 0x6F, 0xDF, 0x37, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x01, 0x07, 0x00, 0x0A, 0x08, 0x6F, 0xA3, 0x4C, 0x00, 0x06, 0x11, 0x06, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xE3, 0xDE, 0x0C, 0x11, 0x06, 0x2C, 0x07, 0x11, 0x06, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x06, 0x08, 0x6F, 0x98, 0x46, 0x00, 0x06, 0x0D, 0x09, 0x2C, 0x39, 0x04, 0x28, 0x46, 0x10, 0x00, 0x2B, 0x6F, 0xE0, 0x37, 0x00, 0x0A, 0x13, 0x08, 0x2B, 0x0D, 0x11, 0x08, 0x6F, 0xE1, 0x37, 0x00, 0x0A, 0x09, 0x6F, 0xA9, 0x4C, 0x00, 0x06, 0x11, 0x08, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xEA, 0xDE, 0x0C, 0x11, 0x08, 0x2C, 0x07, 0x11, 0x08, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x09, 0x6F, 0x10, 0xA2, 0x00, 0x06, 0x08, 0x6F, 0xB1, 0xA1, 0x00, 0x06, 0x6F, 0x53, 0x10, 0x00, 0x0A, 0x13, 0x09, 0x2B, 0x20, 0x11, 0x09, 0x6F, 0x54, 0x10, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x01, 0x07, 0x00, 0x0A, 0x08, 0x6F, 0xAB, 0xA1, 0x00, 0x06, 0x08, 0x6F, 0xA9, 0xA1, 0x00, 0x06, 0x05, 0x6F, 0xCA, 0x4A, 0x00, 0x06, 0x11, 0x09, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xD7, 0xDE, 0x0C, 0x11, 0x09, 0x2C, 0x07, 0x11, 0x09, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x04, 0x28, 0x47, 0x10, 0x00, 0x2B, 0x6F, 0xE2, 0x37, 0x00, 0x0A, 0x13, 0x0A, 0x2B, 0x48, 0x11, 0x0A, 0x6F, 0xE3, 0x37, 0x00, 0x0A, 0x13, 0x0B, 0x08, 0x6F, 0xB1, 0xA1, 0x00, 0x06, 0x6F, 0x53, 0x10, 0x00, 0x0A, 0x13, 0x09, 0x2B, 0x19, 0x11, 0x09, 0x6F, 0x54, 0x10, 0x00, 0x0A, 0x13, 0x0C, 0x0F, 0x03, 0x28, 0x01, 0x07, 0x00, 0x0A, 0x11, 0x0B, 0x11, 0x0C, 0x6F, 0xAE, 0x4C, 0x00, 0x06, 0x11, 0x09, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xDE, 0xDE, 0x0C, 0x11, 0x09, 0x2C, 0x07, 0x11, 0x09, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x11, 0x0A, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xAF, 0xDE, 0x0C, 0x11, 0x0A, 0x2C, 0x07, 0x11, 0x0A, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x09, 0x2C, 0x06, 0x09, 0x6F, 0x11, 0xA2, 0x00, 0x06, 0x04, 0x28, 0x48, 0x10, 0x00, 0x2B, 0x6F, 0xE4, 0x37, 0x00, 0x0A, 0x13, 0x0D, 0x2B, 0x14, 0x11, 0x0D, 0x6F, 0xE5, 0x37, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x01, 0x07, 0x00, 0x0A, 0x08, 0x6F, 0xA7, 0x4C, 0x00, 0x06, 0x11, 0x0D, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xE3, 0xDE, 0x0C, 0x11, 0x0D, 0x2C, 0x07, 0x11, 0x0D, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x08, 0x2A };
    uint32_t il_size = (uint32_t)(sizeof(il));
    // TODO(Ciremun): offsets header
    internal_memory_patch((BYTE *)(base + 0x1DC50C - 0x8), (BYTE*)&il_size, sizeof(uint32_t));
    internal_memory_patch((BYTE *)(base + 0x1DC50C), il, sizeof(il));
}
