#include "lazer/features/difficulty.h"

#define INT64_BYTEA(i) \
    (uint8_t)(((i) & 0x00000000000000FFULL)), \
    (uint8_t)(((i) & 0x000000000000FF00ULL) >> 8), \
    (uint8_t)(((i) & 0x0000000000FF0000ULL) >> 16), \
    (uint8_t)(((i) & 0x00000000FF000000ULL) >> 24), \
    (uint8_t)(((i) & 0x000000FF00000000ULL) >> 32), \
    (uint8_t)(((i) & 0x0000FF0000000000ULL) >> 40), \
    (uint8_t)(((i) & 0x00FF000000000000ULL) >> 48), \
    (uint8_t)(((i) & 0xFF00000000000000ULL) >> 56)

DifficultySetting ar_setting = {
    true,       // enabled
    10.0f,      // value
    "AR",       // label
    "AR: %.1f", // fmt
};

DifficultySetting cs_setting = {
    false,      // enabled
    4.0f,       // value
    "CS",       // label
    "CS: %.1f", // fmt
};

DifficultySetting od_setting = {
    false,      // enabled
    8.0f,       // value
    "OD",       // label
    "OD: %.1f", // fmt
};

DifficultySetting dr_setting = {
    false,      // enabled
    8.0f,       // value
    "DR",       // label
    "DR: %.1f", // fmt
};

void init_difficulty(uintptr_t base)
{
    if (!base)
        return;

    uintptr_t coreclr_dll_base = GetModuleBaseAddress(L"coreclr.dll");
    if (!coreclr_dll_base)
    {
        FR_ERROR("GetModuleBaseAddress coreclr.dll");
        return;
    }

    // NOTE(Ciremun): RVA boundcheck offset
    // TODO(Ciremun): Patch it somewhere else
    // TODO(Ciremun): C header
    BYTE nop[] = { 0x90, 0x90 };
    internal_memory_patch((BYTE *)(coreclr_dll_base + 0x34F84), nop, sizeof(nop));

    // TODO(Ciremun): Append instructions, Fix alignment
    BYTE methodBody[] = {
        // NOTE(Ciremun): Header
        0x1B, 0x30, 0x04, 0x00, 0x49, 0x03, 0x00, 0x00, 0xDA, 0x0E, 0x00, 0x11, 
        // NOTE(Ciremun): Instructions
        0x03, 0x6F, 0x72, 0x46, 0x00, 0x06, 0x0A, 0x06, 0x2D, 0x0B, 0x72, 0xF2, 0x78, 0x04, 0x70, 0x73, 0xE5, 0x46, 0x00, 0x06, 0x7A, 0x02, 0x02, 0x28, 0x8D, 0xA2, 0x00, 0x06, 0x06, 0x6F, 0x91, 0xA2, 0x00, 0x06, 0x0B, 0x02, 0x28, 0x8D, 0xA2, 0x00, 0x06, 0x6F, 0xB1, 0xA1, 0x00, 0x06, 0x6F, 0x10, 0x05, 0x00, 0x0A, 0x16, 0x31, 0x64, 0x07, 0x6F, 0xE0, 0xA1, 0x00, 0x06, 0x2D, 0x5C, 0x12, 0x04, 0x1F, 0x3F, 0x19, 0x28, 0xE5, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x72, 0x72, 0x31, 0x00, 0x70, 0x28, 0xE8, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x72, 0x8D, 0x79, 0x04, 0x70, 0x28, 0xE7, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x03, 0x6F, 0x71, 0x46, 0x00, 0x06, 0x28, 0xE8, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x72, 0xEF, 0x79, 0x04, 0x70, 0x28, 0xE7, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x07, 0x28, 0x43, 0x10, 0x00, 0x2B, 0x12, 0x04, 0x72, 0x4C, 0x24, 0x02, 0x70, 0x28, 0xE7, 0x00, 0x00, 0x0A, 0x12, 0x04, 0x28, 0xE9, 0x00, 0x00, 0x0A, 0x73, 0x7A, 0x47, 0x00, 0x06, 0x7A, 0x04, 0x28, 0x44, 0x10, 0x00, 0x2B, 0x6F, 0xDC, 0x37, 0x00, 0x0A, 0x13, 0x05, 0x2B, 0x14, 0x11, 0x05, 0x6F, 0xDD, 0x37, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x01, 0x07, 0x00, 0x0A, 0x07, 0x6F, 0xA8, 0x4C, 0x00, 0x06, 0x11, 0x05, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xE3, 0xDE, 0x0C, 0x11, 0x05, 0x2C, 0x07, 0x11, 0x05, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x07, 0x05, 0x6F, 0xE1, 0xA1, 0x00, 0x06, 0x0C, 0x04, 0x28, 0x45, 0x10, 0x00, 0x2B, 0x6F, 0xDE, 0x37, 0x00, 0x0A, 0x13, 0x06, 0x2B, 0x14, 0x11, 0x06, 0x6F, 0xDF, 0x37, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x01, 0x07, 0x00, 0x0A, 0x08, 0x6F, 0xA3, 0x4C, 0x00, 0x06, 0x11, 0x06, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xE3, 0xDE, 0x0C, 0x11, 0x06, 0x2C, 0x07, 0x11, 0x06, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x04, 0x7E, 0x3E, 0x4C, 0x00, 0x04, 0x25, 0x2D, 0x17, 0x26, 0x7E, 0x3D, 0x4C, 0x00, 0x04, 0xFE, 0x06, 0x99, 0xA2, 0x00, 0x06, 0x73, 0xB5, 0x02, 0x00, 0x0A, 0x25, 0x80, 0x3E, 0x4C, 0x00, 0x04, 0x28, 0xB2, 0x03, 0x00, 0x2B, 0x2C, 0x3F, 0x04, 0x28, 0xFE, 0x02, 0x00, 0x2B, 0x6F, 0x96, 0x09, 0x00, 0x0A, 0x13, 0x07, 0x2B, 0x19, 0x11, 0x07, 0x6F, 0x97, 0x09, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x01, 0x07, 0x00, 0x0A, 0x08, 0x6F, 0xA9, 0xA1, 0x00, 0x06, 0x6F, 0xAA, 0x4C, 0x00, 0x06, 0x11, 0x07, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xDE, 0xDE, 0x0C, 0x11, 0x07, 0x2C, 0x07, 0x11, 0x07, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x21, INT64_BYTEA((uintptr_t)&ar_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x16, 0x08, 0x6F, 0xA9, 0xA1, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&ar_setting.value), 0xE0, 0x4E, 0x6F, 0x41, 0x9F, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&cs_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x16, 0x08, 0x6F, 0xA9, 0xA1, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&cs_setting.value), 0xE0, 0x4E, 0x6F, 0x3D, 0x9F, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&od_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x16, 0x08, 0x6F, 0xA9, 0xA1, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&od_setting.value), 0xE0, 0x4E, 0x6F, 0x3F, 0x9F, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&dr_setting.enabled), 0xE0, 0x47, 0x17, 0x33, 0x16, 0x08, 0x6F, 0xA9, 0xA1, 0x00, 0x06, 0x21, INT64_BYTEA((uintptr_t)&dr_setting.value), 0xE0, 0x4E, 0x6F, 0x3B, 0x9F, 0x00, 0x06, 0x06, 0x08, 0x6F, 0x98, 0x46, 0x00, 0x06, 0x0D, 0x09, 0x2C, 0x39, 0x04, 0x28, 0x46, 0x10, 0x00, 0x2B, 0x6F, 0xE0, 0x37, 0x00, 0x0A, 0x13, 0x08, 0x2B, 0x0D, 0x11, 0x08, 0x6F, 0xE1, 0x37, 0x00, 0x0A, 0x09, 0x6F, 0xA9, 0x4C, 0x00, 0x06, 0x11, 0x08, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xEA, 0xDE, 0x0C, 0x11, 0x08, 0x2C, 0x07, 0x11, 0x08, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x09, 0x6F, 0x10, 0xA2, 0x00, 0x06, 0x08, 0x6F, 0xB1, 0xA1, 0x00, 0x06, 0x6F, 0x53, 0x10, 0x00, 0x0A, 0x13, 0x09, 0x2B, 0x20, 0x11, 0x09, 0x6F, 0x54, 0x10, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x01, 0x07, 0x00, 0x0A, 0x08, 0x6F, 0xAB, 0xA1, 0x00, 0x06, 0x08, 0x6F, 0xA9, 0xA1, 0x00, 0x06, 0x05, 0x6F, 0xCA, 0x4A, 0x00, 0x06, 0x11, 0x09, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xD7, 0xDE, 0x0C, 0x11, 0x09, 0x2C, 0x07, 0x11, 0x09, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x04, 0x28, 0x47, 0x10, 0x00, 0x2B, 0x6F, 0xE2, 0x37, 0x00, 0x0A, 0x13, 0x0A, 0x2B, 0x48, 0x11, 0x0A, 0x6F, 0xE3, 0x37, 0x00, 0x0A, 0x13, 0x0B, 0x08, 0x6F, 0xB1, 0xA1, 0x00, 0x06, 0x6F, 0x53, 0x10, 0x00, 0x0A, 0x13, 0x09, 0x2B, 0x19, 0x11, 0x09, 0x6F, 0x54, 0x10, 0x00, 0x0A, 0x13, 0x0C, 0x0F, 0x03, 0x28, 0x01, 0x07, 0x00, 0x0A, 0x11, 0x0B, 0x11, 0x0C, 0x6F, 0xAE, 0x4C, 0x00, 0x06, 0x11, 0x09, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xDE, 0xDE, 0x0C, 0x11, 0x09, 0x2C, 0x07, 0x11, 0x09, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x11, 0x0A, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xAF, 0xDE, 0x0C, 0x11, 0x0A, 0x2C, 0x07, 0x11, 0x0A, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x09, 0x2C, 0x06, 0x09, 0x6F, 0x11, 0xA2, 0x00, 0x06, 0x04, 0x28, 0x48, 0x10, 0x00, 0x2B, 0x6F, 0xE4, 0x37, 0x00, 0x0A, 0x13, 0x0D, 0x2B, 0x14, 0x11, 0x0D, 0x6F, 0xE5, 0x37, 0x00, 0x0A, 0x0F, 0x03, 0x28, 0x01, 0x07, 0x00, 0x0A, 0x08, 0x6F, 0xA7, 0x4C, 0x00, 0x06, 0x11, 0x0D, 0x6F, 0x34, 0x02, 0x00, 0x0A, 0x2D, 0xE3, 0xDE, 0x0C, 0x11, 0x0D, 0x2C, 0x07, 0x11, 0x0D, 0x6F, 0xF4, 0x00, 0x00, 0x0A, 0xDC, 0x08, 0x2A, 
        // NOTE(Ciremun): Padding, EHTable (EHTable must start on a 4-byte boundary)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x64, 0x00, 0x00, 0x02, 0x00, 0xA7, 0x00,
        0x21, 0xC8, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xE9, 0x00, 0x21, 0x0A, 0x01, 0x0C,
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x4A, 0x01, 0x26, 0x70, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x94, 0x01, 0x1A, 0xAE, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xCD, 0x01,
        0x2D, 0xFA, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x2B, 0x02, 0x26, 0x51, 0x02, 0x0C,
        0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x13, 0x02, 0x55, 0x68, 0x02, 0x0C, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x8A, 0x02, 0x21, 0xAB, 0x02, 0x0C, 0x00, 0x00, 0x00, 0x00
    };

    MEM_ADDRESS_REQUIREMENTS req = {};
    req.LowestStartingAddress = (PVOID)(base);
    req.HighestEndingAddress = NULL; // TODO(Ciremun): Set upper limit
    req.Alignment = 0;  // Aligns on the system allocation granularity

    MEM_EXTENDED_PARAMETER ext[1] = {};
    ext[0].Type = MemExtendedParameterAddressRequirements;
    ext[0].Pointer = &req;

    // TODO(Ciremun): VirtualAlloc2 alternative
    uintptr_t methodBodyLoc = (uintptr_t)VirtualAlloc2(g_process, 0, sizeof(methodBody), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READ, ext, 1);
    if (methodBodyLoc == NULL)
    {
        FR_ERROR("VirtualAlloc2: %d", GetLastError());
        return;
    }
    FR_INFO("GetPlayableBeatmap method body: %" PRIXPTR, methodBodyLoc);
    internal_memory_patch((BYTE *)methodBodyLoc, methodBody, sizeof(methodBody));

    // TODO(Ciremun): RVA C header
    // GetPlayableBeatmap RVA
    DWORD *oldRVA = (DWORD *)(base + 0x2F4062);
    DWORD newRVA = (DWORD)(methodBodyLoc - base);
    FR_INFO("GetPlayableBeatmap old RVA: 0x%08" PRIX32, *oldRVA);
    FR_INFO("GetPlayableBeatmap new RVA: 0x%08" PRIX32, newRVA);
    internal_memory_patch(oldRVA, &newRVA, sizeof(DWORD));
}
